FeedFetch v1.0 — INSTRUCTIONS
================================

Overview
--------
FeedFetch is a **modular Perl CGI** script that fetches and renders RSS/Atom/RDF feeds
as a clean list of clickable article titles. It handles:
- HTTP/HTTPS
- Redirects
- Transfer-Encoding: chunked
- Content-Encoding: gzip/deflate

This package contains:
- feedfetch.pl   — the CGI script (modular; DEBUG default is N)
- index.html     — example dashboard that shows multiple feeds via iframes
- INSTRUCTIONS.txt (this file)


Requirements
------------
• Perl 5.10+
• Web server that can execute CGI (Apache, lighttpd, nginx+fcgiwrap, etc.)
• Required Perl modules (install with your system package manager or CPAN):
    - IO::Socket::INET
    - IO::Socket::SSL
    - IO::Uncompress::Gunzip
    - Compress::Raw::Zlib
    - URI::Escape

Example installs:
    Debian/Ubuntu:
        sudo apt-get install perl libio-socket-ssl-perl libio-compress-perl liburi-escape-xs-perl

    RHEL/CentOS/Rocky:
        sudo yum install perl IO::Socket::SSL perl-IO-Compress

    CPAN (generic):
        cpan IO::Socket::SSL IO::Uncompress::Gunzip Compress::Raw::Zlib URI::Escape


Installation
------------
1) Copy files to your CGI-enabled location.
   • Common Apache paths: /usr/lib/cgi-bin/  or  /var/www/cgi-bin/
   • Or keep feedfetch.pl in your CGI dir and place index.html under your normal docroot.

2) Make the script executable:
        chmod +x feedfetch.pl

3) Ensure CGI is enabled on your server.

   Apache (example):
       a) Enable CGI:
            a2enmod cgi          # Debian/Ubuntu
       b) Allow .pl execution (one option):
            ScriptAlias /cgi-bin/ "/usr/lib/cgi-bin/"
            <Directory "/usr/lib/cgi-bin/">
                AllowOverride None
                Options +ExecCGI
                AddHandler cgi-script .cgi .pl
                Require all granted
            </Directory>
       c) Restart Apache:
            sudo service apache2 restart

   nginx (example, via fcgiwrap) — consult your distro documentation.

4) Test the CGI directly in your browser:
        http://yourserver/cgi-bin/feedfetch.pl?url=https://rss.slashdot.org/slashdot/slashdotMain

   If you see a list of headlines, CGI is working.

5) Open the dashboard:
   Place index.html in a web-accessible directory and browse to it.
   The sample iframes call feedfetch.pl with several tech feeds.


How to Add or Remove Feeds
--------------------------
The dashboard uses simple <iframe> elements that call feedfetch.pl with a feed URL.

Example block (in index.html):
    <iframe src="./feedfetch.pl?url=https://rss.slashdot.org/slashdot/slashdotMain"></iframe>

• To ADD a feed: duplicate an <iframe> line and change the URL after  url=
• To REMOVE a feed: delete that <iframe> line
• You may mix RSS, Atom, and RDF feeds; the script auto-detects the format.
• The visible box title is taken from the feed’s <title> element.

Layout tips (index.html):
• The grid is CSS-based. Adjust column width/height via the CSS:
      .grid { grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 8px; }
      iframe { height: 450px; }
  Increase or decrease minmax() and height to suit your screen.

Direct Use (without the dashboard)
----------------------------------
You can call the CGI directly for a single feed:
    http://yourserver/cgi-bin/feedfetch.pl?url=FEED_URL

Examples:
    http://yourserver/cgi-bin/feedfetch.pl?url=https://feeds.arstechnica.com/arstechnica/index
    http://yourserver/cgi-bin/feedfetch.pl?url=https://www.wired.com/feed/rss
    http://yourserver/cgi-bin/feedfetch.pl?url=https://rss.slashdot.org/slashdot/slashdotMain


Configuration (feedfetch.pl)
----------------------------
Open feedfetch.pl and edit the configuration section near the top:

    my $MAX_ITEMS     = 15;   # headlines per feed
    my $TIMEOUT       = 20;   # socket timeout (seconds)
    my $DEBUG         = 'N';  # default debug mode: 'Y' or 'N' (default is N)

    # Appearance (applies to the rendered list inside each iframe):
    my $FONT_FAMILY = "sans-serif";
    my $FONT_SIZE   = "10pt";
    my $BOX_BORDER  = "1px solid #888";
    my $BOX_BG      = "#f8f8f8";
    my $BOX_PADDING = "0.6em";
    my $BOX_HEIGHT  = "100%";
    my $LINK_COLOR  = "#0044aa";

Temporarily enabling DEBUG output
• Without editing the file, you can enable debug for a single request by adding “&debug=1”
  to the query string:
      http://yourserver/cgi-bin/feedfetch.pl?url=...&debug=1


Security Notes
--------------
• The script fetches third‑party URLs supplied in the query string. If exposing this publicly,
  consider restricting allowable hostnames or proxying via a whitelist.
• The output is simple HTML; links open in a new tab/window (target=_blank).
• Some sites block framing; this script renders the feed content itself, so framing restrictions
  on the *site* typically do not affect FeedFetch (you are not framing their pages, only our output).


Troubleshooting
---------------
• “No data received …”
    - Check the feed URL is correct and accessible from the server (firewall/DNS).
    - Try HTTPS if HTTP fails (the script auto-tries both in some cases).
    - Some hosts block requests without a browser-like User-Agent; FeedFetch sends one.

• “Unknown feed format.”
    - The feed may not be valid RSS/Atom/RDF, or it is HTML/JSON.
    - Use &debug=1 to view response headers; verify Content-Type and payload.

• Binary-looking garbage or ‘gzip’ byte signatures in debug
    - Ensure the required modules are installed, especially IO::Uncompress::Gunzip and
      Compress::Raw::Zlib.
    - The script first de-chunks, then decompresses gzip/deflate.

• 500 Internal Server Error
    - Make sure feedfetch.pl is executable (chmod +x).
    - Confirm CGI is enabled and .pl is allowed to execute.
    - Check the web server error log for Perl syntax errors or missing modules.

• SELinux/AppArmor
    - If enabled, ensure your web server is allowed to make outbound network connections
      (e.g., setsebool -P httpd_can_network_connect 1 on SELinux systems).


License & Version
-----------------
• You may use and modify FeedFetch for your own deployments.
• Version: 1.0 (stable) — DEBUG default is N.
